// Copyright 2024 Vladimir Kochnev. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

// This file is generated by mkmach.go

#include "textflag.h"

TEXT	libc_mach_vm_allocate_trampoline<>(SB),NOSPLIT,$0
	MOVQ	8(DI), SI	// address
	MOVQ	16(DI), DX	// size
	MOVL	24(DI), CX	// flags
	MOVL	0(DI), DI	// target
	CALL	libc_mach_vm_allocate(SB)
	RET

GLOBL	·libc_mach_vm_allocate_trampoline_addr(SB), RODATA, $8
DATA	·libc_mach_vm_allocate_trampoline_addr(SB)/8, $libc_mach_vm_allocate_trampoline<>(SB)

TEXT	libc_mach_vm_deallocate_trampoline<>(SB),NOSPLIT,$0
	MOVQ	8(DI), SI	// address
	MOVQ	16(DI), DX	// size
	MOVL	0(DI), DI	// target
	CALL	libc_mach_vm_deallocate(SB)
	RET

GLOBL	·libc_mach_vm_deallocate_trampoline_addr(SB), RODATA, $8
DATA	·libc_mach_vm_deallocate_trampoline_addr(SB)/8, $libc_mach_vm_deallocate_trampoline<>(SB)

TEXT	libc_mach_vm_remap_trampoline<>(SB),NOSPLIT,$0
	MOVQ	8(DI), SI	// target_address
	MOVQ	16(DI), DX	// size
	MOVQ	24(DI), CX	// mask
	MOVL	32(DI), R8	// flags
	MOVL	40(DI), R9	// src_task
	ADJSP	$8
	PUSHQ	80(DI)		// inheritance
	PUSHQ	72(DI)		// max_protection
	PUSHQ	64(DI)		// cur_protection
	PUSHQ	56(DI)		// copy
	PUSHQ	48(DI)		// src_address
	MOVL	0(DI), DI	// target_task
	CALL	libc_mach_vm_remap(SB)
	ADJSP	$-48
	RET

GLOBL	·libc_mach_vm_remap_trampoline_addr(SB), RODATA, $8
DATA	·libc_mach_vm_remap_trampoline_addr(SB)/8, $libc_mach_vm_remap_trampoline<>(SB)
